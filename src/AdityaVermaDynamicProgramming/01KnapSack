package AdityaVermaDynamicProgramming;

public class KnapSack01 {
//Recursion
	public static int knapSackRecursive(int wt[], int val[], int W, int n) {
		if (n == 0 || W == 0)
			return 0;

		if (wt[n - 1] <= W) {
			int a = knapSackRecursive(wt, val, W - wt[n - 1], n - 1) + val[n - 1];
			int b = knapSackRecursive(wt, val, W, n - 1);
			int c = Math.max(a, b);
			return c;
		} else {
			return knapSackRecursive(wt, val, W, n - 1);
		}
	}

	// Memo
	public static int knapSackMemo(int wt[], int val[], int W, int n) {
		for (int i = 0; i < n + 2; i++) {
			for (int j = 0; j < W + 2; j++) {
				memo[i][j] = -1;
			}
		}
		return helper(W, wt, val, n);
	}

	static int[][] memo = new int[1002][1002];

	public static int helper(int W, int wt[], int val[], int n) {
		if (n == 0) {
			return 0;
		}
		if (memo[n][W] != -1) {
			return memo[n][W];
		}
		if (wt[n - 1] <= W) {
			int a = helper(W, wt, val, n - 1);
			int b = helper(W - wt[n - 1], wt, val, n - 1) + val[n - 1];
			int c = Math.max(a, b);
			memo[n][W] = c;
			return c;
		} else {
			int a1 = helper(W, wt, val, n - 1);
			memo[n][W] = a1;
			return a1;
		}
	}

	// Dynamic Programming
	public static int knapSackdp(int W, int wt[], int val[], int n) {
		int t[][] = new int[n + 1][W + 1];
		for (int i = 0, j = 0; i < n; i++)
			t[i][j] = 0;
		for (int i = 0, j = 0; j < W; j++)
			t[i][j] = 0;
		for (int i = 1; i < n + 1; i++) {
			for (int j = 1; j < W + 1; j++) {
				if (wt[i - 1] <= j) {
					int a = t[i - 1][j];
					int b = t[i - 1][j - wt[i - 1]] + val[i - 1];
					t[i][j] = Math.max(a, b);
				} else {
					t[i][j] = t[i - 1][j];
				}
			}
		}
		return t[n][W];
	}
}
